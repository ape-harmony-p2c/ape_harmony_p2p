generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address         String         @id @unique
  userName        String?
  bio             String?
  profileTokenId  String?
  primaryFunction String?
  twitter         String?  @unique
  lastSignin      DateTime @updatedAt

  crowdSales   CrowdSale[]
  comments     Comment[]
  commentVotes CommentVote[]
  Contribution Contribution[]
}

model CrowdSale {
  id         Int      @id @default(autoincrement())
  title      String
  body       String
  info       String
  endingAt   DateTime
  maxFunding String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [address])
  createdById String

  comments     Comment[]
  commentVotes CommentVote[]
  Contribution Contribution[]
}

model Comment {
  id              Int           @id @default(autoincrement())
  body            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdById     String
  crowdSaleId     Int
  parentCommentId Int?
  createdBy       User          @relation(fields: [createdById], references: [address])
  crowdSale       CrowdSale     @relation(fields: [crowdSaleId], references: [id])
  parentComment   Comment?      @relation("NestedComment", fields: [parentCommentId], references: [id])
  childComments   Comment[]     @relation("NestedComment")
  commentVotes    CommentVote[]
}

model CommentVote {
  id          Int        @id @default(autoincrement())
  value       Int
  commentId   Int
  voterId     String
  crowdSaleId Int?
  comment     Comment    @relation(fields: [commentId], references: [id])
  CrowdSale   CrowdSale? @relation(fields: [crowdSaleId], references: [id])
  voter       User       @relation(fields: [voterId], references: [address])
}

model Contribution {
  id          Int       @id @default(autoincrement())
  amount      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  userId      String
  crowdSaleId Int
  CrowdSale   CrowdSale @relation(fields: [crowdSaleId], references: [id])
  User        User      @relation(fields: [userId], references: [address])
}

model Contribution {
  id        Int      @id @default(autoincrement())
  amount    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [address])
  userId      String
  crowdSale   CrowdSale @relation(fields: [crowdSaleId], references: [id])
  crowdSaleId Int
}
